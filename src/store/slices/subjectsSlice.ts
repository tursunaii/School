import { createSlice, PayloadAction } from '@reduxjs/toolkit'

export interface Subject {
  id: string
  name: string
  nameKg: string
  icon: string
  color: string
  description: string
  grade: number
  lessonsCount: number
  isCompleted: boolean
}

interface SubjectsState {
  subjects: Subject[]
  selectedGrade: number | null
  searchQuery: string
  isLoading: boolean
}

const initialState: SubjectsState = {
  subjects: [
    {
      id: '1',
      name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
      nameKg: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
      icon: 'üßÆ',
      color: 'bg-blue-100 text-blue-600',
      description: '–ò–∑—É—á–µ–Ω–∏–µ —á–∏—Å–µ–ª, –∞–ª–≥–µ–±—Ä—ã –∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏',
      grade: 5,
      lessonsCount: 24,
      isCompleted: false,
    },
    {
      id: '2',
      name: '–ö—ã—Ä–≥—ã–∑ —Ç–∏–ª–∏',
      nameKg: '–ö—ã—Ä–≥—ã–∑ —Ç–∏–ª–∏',
      icon: 'üìö',
      color: 'bg-green-100 text-green-600',
      description: '–ò–∑—É—á–µ–Ω–∏–µ –∫—ã—Ä–≥—ã–∑—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã',
      grade: 5,
      lessonsCount: 20,
      isCompleted: false,
    },
    {
      id: '3',
      name: '–ò—Å—Ç–æ—Ä–∏—è',
      nameKg: '–¢–∞—Ä—ã—Ö',
      icon: 'üèõÔ∏è',
      color: 'bg-purple-100 text-purple-600',
      description: '–ò—Å—Ç–æ—Ä–∏—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞ –∏ –º–∏—Ä–∞',
      grade: 5,
      lessonsCount: 18,
      isCompleted: false,
    },
    {
      id: '4',
      name: '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
      nameKg: '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
      icon: 'üíª',
      color: 'bg-orange-100 text-orange-600',
      description: '–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
      grade: 5,
      lessonsCount: 16,
      isCompleted: false,
    },
  ],
  selectedGrade: null,
  searchQuery: '',
  isLoading: false,
}

export const subjectsSlice = createSlice({
  name: 'subjects',
  initialState,
  reducers: {
    setSelectedGrade: (state, action: PayloadAction<number | null>) => {
      state.selectedGrade = action.payload
    },
    setSearchQuery: (state, action: PayloadAction<string>) => {
      state.searchQuery = action.payload
    },
    markSubjectCompleted: (state, action: PayloadAction<string>) => {
      const subject = state.subjects.find(s => s.id === action.payload)
      if (subject) {
        subject.isCompleted = true
      }
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.isLoading = action.payload
    },
  },
})

export const { setSelectedGrade, setSearchQuery, markSubjectCompleted, setLoading } = subjectsSlice.actions
export default subjectsSlice.reducer
